Bug fixes/improvement for cgdb-0.6.3

 [x] Configure should not accept yacc. bison needs to be available to build CGDB.
     Document in manual that bison is required and that yacc is not good enough.
     - This is fixed, however, users will not need bison installed to build CGDB.


bluffer_
 [ ] Look at passing ^z to GDB
 [ ] Look at how CGDB could allow itself to debug curses applications by
     putting itself in the background when the inferior runs.
 [ ] If you single step into a system library call (or any library call for
     that matter where the source isn't available), CGDB should show
     [NO SOURCE], instead of displaying the last source position available.
     Maybe make this an option.

neosun_
 [ ] Upload mac osx binary.
 [ ] Setup nightly distribution for download.
 [ ] Add key mapping support to cgdbrc.
 [ ] Look into getopts, it generates the usage/getopts/man/texinfo data.
     This could replace the already done work of generating a man page.
 [ ] Figure out how to get extra prototypes out of cgdb.h
 [ ] Provide a single interface to the user, that process's GDB output.
    When a command is finished a different return value will be sent
    then when a command is stil being processed. Also, when a command
    is finished, then the user can look at the tgdb_responses.
 [ ] Re-arrange the a2 subsystem to be easier and better to modify
     This could include writing a quick flex/bison parser that could make a 
     parse tree of the annotation command.
 [ ] Add a key binding to get to the currently executing line.
     'p' was suggested for this.
 [ ] Cursor isn't shown in xterm

- TGDB interface changes
 [ ] Modify TGDB to not automatically run commands. (ie. initial list command)
     [ ] The 'info breakpoints' is automatically done for the client. This could
         either be a request that is done each time, a request that's done once for
	 asychronous updates.
     [ ] The asynchronous source updates. This could be done with the same 
         techniques as above.

- TGDB interface changes
 [ ] Modify the tgdb_response data structure to incorporate into it
    the associated tgdb_request data structure. Make sure to remove
    the cgdb.c:last_request variable.
 [ ] Free tgdb_request data structures.

- Fix ACS_VLINE problem. This char is not available everywhere and 
  should be a runtime option. Check with jonathon to make sure this problem
  is fixed.  (Actually, check on ALL ACS characters, we use several of them.)

Bug fixes/improvement for cgdb-0.6.1

 [x] Tab completion is broken in CGDB when using gnat 3.15p
     If you tab on 'r -e E' you will get back 'server complete r -e E',
     instead of nothing.
 [x] is_finished is not set if tgdb_process exists in first return statement
 [x] Add Steve Folta's color patch.
 [x] Fix cgdb.1 to be in release. Also in make install.
 [x] Automatically generate man pages using help2man.
 [x] Tab completion feature request from cgdb.sf.net
 [x] Document the new Highlight command.
 [x] Test the new Highlight command.
 [x] Logo message could be displayed to have <ESC>:help in window
 [x] Breakpoint's made in thread's do not apper in browser, this is
     because there is a newline in the field 5 info:
    0xb6f4e552 (\n)
    (\032)(\032)field 5(\n)
    in SpeexCodec::Consume(TelEngine::DataBlock const&, unsigned
		   long)(\n)
                                           at speexcodec.cpp:162(\n)
            breakpoint already hit 1 time(\n)
    (\n)
    (\032)(\032)breakpoints-table-end(\n)

- Use valgrind to get rid of most memory leaks.

Bug fixes/improvement for cgdb-0.6.0

Closed:
[x] Use valgrind to get rid of most memory leaks.

[x] Add documentation to CGDB. I think texinfo is the preferred way to do this,
  it generates info and html pages. For man pages, looking at help2man might
  be a good idea.

[x] If GDB responds with a fullname in the file dialog, then when the file is 
    selected, CGDB only knows about the fullname. When breakpoints are then set,
    it doesn't work because the filename is absolute, and CGDB doesn't know the
    relative component. This is a major bug.

 [x] Strip readline out of TGDB and put it into CGDB. 
     This is in preparation for removing the rlctx code.

- TGDB interface changes
 [x] Modify TGDB to not automatically run commands. (ie. initial list command)
     [x] The file and line discovery is now not done automatically. CGDB
         requests this functionality after it creates the TGDB instance.


 [x] Remove the tgdb_set_prompt_change_callback, and add it to the 
    tgdb_response mechanism.
 [x] TGDB will no longer buffer commands. It will receive and process
    1 command at a time.
 [x] Provide an TGDB queue interface, which can be used by CGDB and
    tgdb_driver to provide a buffer of commands that are similar.
    Other client can maintain there own queue if they want to.
 [x] Each of the functions that will cause TGDB to do commands, like
    tgdb_get_inferior_source_files, tgdb_get_absolute_path, ...
    will return a 'tgdb_input_command' data structure. 
 [x] The client can make TGDB process a command by giving it the 
    tgdb_input_command function.
 [x] Alternativly, the client can put the command data structure into
    the TGDB queue.
 [x] Remove the tgdb_set_prompt_update_callback function. Because TGDB
    will no longer buffer callbacks, the user will know when another
    command is being executed.
 [x] Make each command return the request as the return type, instead of
    as the parameter. If the value returns as NULL, there was an error.
 [x] Document INTERFACE_REQUEST_COMMANDS
 [x] Empty command queue when the ^c signal is reached. [should this be done
     in CGDB or TGDB]? Done in TGDB.
 [x] Delete all annotations that are not being used.
 [x] revamp the tgdb_response data structure to simply be a union with an
  enum, which selects the appropriate values. This would be a self
  documenting data structure.

Bug fixes/improvement for cgdb-0.5.3

Closed:

- Get readline library to only build the static library.
- Update FAQ, it's wrong.
- Fix runtime error with arrow style long and regex searching.
- Should package readline with CGDB?  No!
- Make sure arrowstyle option is commented.
- Get ^l to refresh the screen.
- Fix compiler warning 
../../../../cgdb/tgdb/tgdb-base/src/tgdb.c: In function `tgdb_recv_debugger_data':
../../../../cgdb/tgdb/tgdb-base/src/tgdb.c:1254: warning: passing arg 5 of `tgdb_client_parse_io' from incompatible pointer type

Bug fixes for cgdb-0.5.2

Closed:

- Make DESTDIR work in Makefile for installing CGDB
    http://sourceforge.net/mailarchive/forum.php?thread_id=6966700&forum_id=26100
- Make the autoconf stuff check for version .5.1 of readline
- Fix bug on sf.net. It is a compile error that happens to show up as a warning in
  cygwin. Fix the warning and the error might go away.

Bug fixes for cgdb-0.5.1

Closed:

- Fix race condition on waitpid
- Fix --args command line option
- Make sure when EOF is read that CGDB dies.

Bug fixes before cgdb-0.3.2 release.

Bugs:

o Fix ws option. It doesn't lock properly. Resize window real small, then
  resize it big, its not the correct percent.
o Make ws option receive a percent, so we can make it any size.
  Not just the 5 choices originally desired. It would be more flexible 
  this way. I would be silly if someone needed 35% ...
  However, making it take a percent does not solve the whole problem.
  The user needs to start at one of these offsets. How should this be done?

Closed:

o Fix 'set sc' flicker problem. When user hits 'n', a flicker occurs.
o Fix resizing to fast bug. ( Only handle last resize, not all ).
  This is easy to reproduce when running over the Internet. :)
  This doesn't really seem to be the problem. However, the potential
  bug is still fixed.
o Make -/+ go to either full screen or 2 lines off, on odd or even size.
  This was fixed by adding option winminheight :) (Ben's idea),
  Now you can make the value whatever you want it to be.
